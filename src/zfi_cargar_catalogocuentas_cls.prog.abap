*&---------------------------------------------------------------------*
*& Include          ZFI_CARGAR_CATALOGOCUENTAS_CLS
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&       Class LCX_CONFIGURATION
*&---------------------------------------------------------------------*
*        Text To manage exceptions
*----------------------------------------------------------------------*
CLASS LCX_CONFIGURATION DEFINITION
                         INHERITING FROM CX_STATIC_CHECK.
  PUBLIC SECTION.
    DATA LOCAL_TEXT TYPE STRING.
    METHODS CONSTRUCTOR IMPORTING TEXT TYPE STRING.
ENDCLASS.

CLASS LCX_CONFIGURATION IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    SUPER->CONSTRUCTOR( ).
    LOCAL_TEXT = TEXT.
  ENDMETHOD.
ENDCLASS.
*&---------------------------------------------------------------------*
*&       Class LOAD_EXCEL
*&---------------------------------------------------------------------*
*        Text Class to manage the load excel proccess
*----------------------------------------------------------------------*
CLASS LCL_LOAD_EXCEL DEFINITION.

  PUBLIC SECTION.

    DATA V_FULLPATH TYPE STRING.
    DATA TABLESTRUCTURE TYPE REF TO CL_ABAP_STRUCTDESCR.
    DATA TABLETYPE      TYPE REF TO CL_ABAP_TABLEDESCR.
    DATA TABLEDATA TYPE REF TO DATA.
    DATA TABLENAME TYPE STRING VALUE 'ZFI_CUENTAS_ISR'.

    METHODS CONSTRUCTOR
      IMPORTING V_FULLPATH TYPE STRING
      RAISING LCX_CONFIGURATION.

    METHODS IMPORT.

    METHODS DELETE_TABLE
      RAISING LCX_CONFIGURATION.

  PROTECTED SECTION.

    METHODS EXTRACT_DATA_FROM_EXCEL
      RAISING LCX_CONFIGURATION.

ENDCLASS.

CLASS LCL_LOAD_EXCEL IMPLEMENTATION.

  METHOD CONSTRUCTOR.

    IF V_FULLPATH IS INITIAL.

      RAISE EXCEPTION TYPE LCX_CONFIGURATION
        EXPORTING
          TEXT = 'La ruta de archivo a cargar no puede estar vacio'.

    ENDIF.

    ME->V_FULLPATH = V_FULLPATH.

    ME->TABLESTRUCTURE ?= CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( ME->TABLENAME ).

    IF NOT ME->TABLESTRUCTURE IS BOUND.

      RAISE EXCEPTION TYPE LCX_CONFIGURATION
        EXPORTING
          TEXT = |Exception occurs when parsing Table Structure for { ME->TABLENAME } |.

    ENDIF.

    TRY.

      ME->TABLETYPE = CL_ABAP_TABLEDESCR=>CREATE( P_LINE_TYPE = ME->TABLESTRUCTURE ).

    CATCH CX_SY_TABLE_CREATION INTO DATA(TABLETYPEEXCEPTION).

        RAISE EXCEPTION TYPE LCX_CONFIGURATION
          EXPORTING
            TEXT = |Exception occurs when parsing Table Type for { ME->TABLENAME } |.

    ENDTRY.

    CREATE DATA TABLEDATA TYPE HANDLE ME->TABLETYPE.

  ENDMETHOD.

  METHOD IMPORT.

    ME->EXTRACT_DATA_FROM_EXCEL( ).

    FIELD-SYMBOLS <FINALTABLEDATA> TYPE STANDARD TABLE.
    DATA FINALTABLEDATA TYPE REF TO DATA.
    CREATE DATA FINALTABLEDATA TYPE HANDLE ME->TABLETYPE.
    ASSIGN FINALTABLEDATA->* TO <FINALTABLEDATA>.

    FIELD-SYMBOLS <TABLEDATA> TYPE STANDARD TABLE.
    ASSIGN ME->TABLEDATA->* TO <TABLEDATA>.
    LOOP AT <TABLEDATA> ASSIGNING FIELD-SYMBOL(<CURRENTTABLEDATA>).
      ASSIGN COMPONENT 'MANDT' OF STRUCTURE <CURRENTTABLEDATA> TO FIELD-SYMBOL(<LV_CLIENT>).
      IF SY-SUBRC = 0.
        <LV_CLIENT> = ''.
        IF NOT <CURRENTTABLEDATA> IS INITIAL.
          <LV_CLIENT> = SY-MANDT.
          APPEND <CURRENTTABLEDATA> TO <FINALTABLEDATA>.
        ELSE.
          "DELETE <TABLEDATA> FROM <CURRENTTABLEDATA>.
        ENDIF.
      ELSE.
        IF <CURRENTTABLEDATA> IS INITIAL.
          "DELETE <TABLEDATA> FROM <CURRENTTABLEDATA>.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF NOT <FINALTABLEDATA> IS INITIAL.
      MODIFY (TABLENAME) FROM  TABLE <FINALTABLEDATA>.
      "BREAK-POINT.
      IF SY-SUBRC <> 0.
        ROLLBACK WORK.
        RAISE EXCEPTION TYPE LCX_CONFIGURATION
          EXPORTING
            TEXT = |EXCEPTION OCCURS WHEN MODIFYING TABLE:  { TABLENAME } |.
      ELSE.
        MESSAGE S001(00) WITH |TABLE:  { TABLENAME } IS MODIFIED SUCCESSFULLY.|.
      ENDIF.
    ENDIF.

  ENDMETHOD.

  METHOD EXTRACT_DATA_FROM_EXCEL.

    FIELD-SYMBOLS: <EXCELDATA> TYPE STANDARD TABLE,
                   <ROW> TYPE ANY,
                   <VALUE> TYPE ANY.

    ASSIGN ME->TABLEDATA->* TO <EXCELDATA>.



    DATA(XLSXHANDLER) = CL_EHFND_XLSX=>GET_INSTANCE( ).
    CHECK NOT XLSXHANDLER IS INITIAL.

    TRY.
        DATA(XSTRING_EXCEL) = CL_OPENXML_HELPER=>LOAD_LOCAL_FILE( ME->V_FULLPATH ).
      CATCH CX_OPENXML_NOT_FOUND INTO DATA(OPENXML_NOT_FOUND).
        RETURN.
    ENDTRY.

    TRY.
        DATA(XLSXDOCUMENT) = XLSXHANDLER->LOAD_DOC( IV_FILE_DATA = XSTRING_EXCEL ).
      CATCH CX_OPENXML_FORMAT INTO DATA(OPENXML_FORMAT).
        RETURN.
      CATCH CX_OPENXML_NOT_ALLOWED INTO DATA(OPENXML_NOT_ALLOWED).
        RETURN.
      CATCH CX_DYNAMIC_CHECK INTO DATA(DYNAMIC_CHECK).
        RETURN.
    ENDTRY.

    "EXTRACT DATA FROM FIRST SHEET
    TRY.
        DATA(FIRSTSHEET) = XLSXDOCUMENT->GET_SHEET_BY_ID( IV_SHEET_ID = 1 ).
      CATCH CX_OPENXML_FORMAT  INTO OPENXML_FORMAT.
        RAISE EXCEPTION TYPE LCX_CONFIGURATION
          EXPORTING
            TEXT = |ERROR OCCURS WHEN EXTRACT DATA FROM FIRST SHEET: CX_OPENXML_FORMAT |.
      CATCH CX_OPENXML_NOT_FOUND  INTO OPENXML_NOT_FOUND.
        RAISE EXCEPTION TYPE LCX_CONFIGURATION
          EXPORTING
            TEXT = |ERROR OCCURS WHEN EXTRACT DATA FROM FIRST SHEET: OPENXML_NOT_FOUND |.
      CATCH CX_DYNAMIC_CHECK  INTO DYNAMIC_CHECK.
        RAISE EXCEPTION TYPE LCX_CONFIGURATION
          EXPORTING
            TEXT = |ERROR OCCURS WHEN EXTRACT DATA FROM FIRST SHEET: CX_DYNAMIC_CHECK |.
    ENDTRY.
    "RETURN IF NO SHEET IN XLSX FILE
    CHECK NOT FIRSTSHEET IS INITIAL.

    "CHECK FILE STRUCTURE, FIRST LINE OF EXCEL FILE
    DATA(COLUMNCOUNT) = FIRSTSHEET->GET_LAST_COLUMN_NUMBER_IN_ROW( 1 ).
    DATA COLUMN TYPE I VALUE 1.
    "DATA TABLECOMPONENTS TYPE CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
    DATA(TABLECOMPONENTS) = ME->TABLESTRUCTURE->GET_COMPONENTS( ).

    DATA INVALIDCOLUMN TYPE STRING.

    TYPES: BEGIN OF COLUMNINFO,
             COLUMN     TYPE I,
             COLUMNNAME TYPE STRING,
           END OF COLUMNINFO.
    TYPES COLUMNSINFO TYPE STANDARD TABLE OF COLUMNINFO WITH EMPTY KEY.

    DATA COLUMNFROMFILE TYPE COLUMNSINFO.

    DO COLUMNCOUNT TIMES.
      DATA(CELLVALUE) = FIRSTSHEET->GET_CELL_CONTENT(
                            EXPORTING
                              IV_ROW     = 1
                              IV_COLUMN  = COLUMN ).

      APPEND INITIAL LINE TO COLUMNFROMFILE ASSIGNING FIELD-SYMBOL(<COLUMNFROMFILE>).
      <COLUMNFROMFILE>-COLUMN = COLUMN.
      <COLUMNFROMFILE>-COLUMNNAME = CELLVALUE.

      IF LINE_EXISTS( TABLECOMPONENTS[ NAME = CELLVALUE ]   ).
        DELETE TABLECOMPONENTS WHERE NAME = CELLVALUE.
      ELSE.
        INVALIDCOLUMN = INVALIDCOLUMN && |,{ CELLVALUE }|.
      ENDIF.
      COLUMN = COLUMN + 1.
    ENDDO.
    DELETE TABLECOMPONENTS WHERE NAME = 'USUARIO'. "Usuario se cargara desde sistema
    DELETE TABLECOMPONENTS WHERE NAME = 'FECHA'. "Fecha se cargara desde sistema
    DELETE TABLECOMPONENTS WHERE NAME = 'HORA'. "Hora se cargara desde sistema
    DATA MISSINGCOLUMNS TYPE STRING.
    LOOP AT TABLECOMPONENTS REFERENCE INTO DATA(CURRENTCOMPONENT).
      MISSINGCOLUMNS = MISSINGCOLUMNS && |, { CURRENTCOMPONENT->*-NAME }|.
    ENDLOOP.
    IF NOT INVALIDCOLUMN IS INITIAL.
      RAISE EXCEPTION TYPE LCX_CONFIGURATION
        EXPORTING
          TEXT = |FIND INVALID COLUMNS: { INVALIDCOLUMN } |.
    ENDIF.

    IF NOT MISSINGCOLUMNS IS INITIAL.
      RAISE EXCEPTION TYPE LCX_CONFIGURATION
        EXPORTING
          TEXT = |COLUMNS DO NOT EXIST IN EXCEL FILE: { MISSINGCOLUMNS } |.
    ENDIF.

    TABLECOMPONENTS = ME->TABLESTRUCTURE->GET_COMPONENTS( ).
    DATA(ROWCOUNT) = FIRSTSHEET->GET_LAST_ROW_NUMBER( ).
    DATA CURRENTROW TYPE I VALUE 2.
    WHILE CURRENTROW <= ROWCOUNT.
      APPEND INITIAL LINE TO <EXCELDATA> ASSIGNING FIELD-SYMBOL(<CURRENTROW>).
      LOOP AT COLUMNFROMFILE REFERENCE INTO DATA(CURRENTCOLUMN).
        CELLVALUE = FIRSTSHEET->GET_CELL_CONTENT(
                              EXPORTING
                                IV_ROW     = CURRENTROW
                                IV_COLUMN  = CURRENTCOLUMN->*-COLUMN ).
        ASSIGN COMPONENT CURRENTCOLUMN->*-COLUMNNAME OF STRUCTURE <CURRENTROW> TO FIELD-SYMBOL(<CELLVALUE>).

        IF CURRENTCOLUMN->*-COLUMNNAME EQ 'ZCOEFICIENTE_UTILIDAD'.

          FIND 'E' IN CELLVALUE.

          IF SY-SUBRC EQ 0.

            CLEAR: V_VALUE_CONVERTED,
                   V_VALUE_TO_CONVERT.

            V_VALUE_TO_CONVERT = CELLVALUE.

            CALL FUNCTION 'QSS0_FLTP_TO_CHAR_CONVERSION'
              EXPORTING
                I_NUMBER_OF_DIGITS             = 4
                I_FLTP_VALUE                   = V_VALUE_TO_CONVERT
*               I_VALUE_NOT_INITIAL_FLAG       = 'X'
*               I_SCREEN_FIELDLENGTH           = 16
              IMPORTING
                E_CHAR_FIELD                   = V_VALUE_CONVERTED
                      .
            <CELLVALUE> = V_VALUE_CONVERTED.

          ELSE.

            FIND ',' IN CELLVALUE.

            IF SY-SUBRC EQ 0.

              REPLACE ',' IN CELLVALUE WITH '.'.
              <CELLVALUE> = CELLVALUE.

            ELSE.

            <CELLVALUE> = CELLVALUE.

            ENDIF.

          ENDIF.

        ELSE.

        <CELLVALUE> = CELLVALUE.

        ENDIF.
      ENDLOOP.
      CURRENTROW = CURRENTROW + 1.
    ENDWHILE.

    LOOP AT TABLECOMPONENTS REFERENCE INTO DATA(CURRENTCOMPONETS).

      CASE CURRENTCOMPONETS->NAME.
        WHEN 'USUARIO'.
          LOOP AT <EXCELDATA> ASSIGNING <ROW>.
            ASSIGN COMPONENT CURRENTCOMPONETS->*-NAME OF STRUCTURE <ROW> TO <VALUE>.
            <VALUE> = SY-UNAME.
          ENDLOOP.
        WHEN 'FECHA'.
          LOOP AT <EXCELDATA> ASSIGNING <ROW>.
            ASSIGN COMPONENT CURRENTCOMPONETS->*-NAME OF STRUCTURE <ROW> TO <VALUE>.
            <VALUE> = SY-DATUM.
          ENDLOOP.
        WHEN 'HORA'.
          LOOP AT <EXCELDATA> ASSIGNING <ROW>.
            ASSIGN COMPONENT CURRENTCOMPONETS->*-NAME OF STRUCTURE <ROW> TO <VALUE>.
            <VALUE> = SY-UZEIT.
          ENDLOOP.
      ENDCASE.


    ENDLOOP.

  ENDMETHOD.

  METHOD DELETE_TABLE.

    DELETE FROM (ME->TABLENAME).

    COMMIT WORK.

  ENDMETHOD.

ENDCLASS.
